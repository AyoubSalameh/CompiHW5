Program: Funcs V                                                                 {$$ = new Program();}
        ;
Funcs: /*epsilon*/      V                                                        {$$ = new Funcs();}
     | FuncDecl Funcs   V                                                        {$$ = new Funcs();}
     ;

FuncDecl: OverRide RetType ID LPAREN Formals RPAREN {$$ = new FuncDecl(dynamic_cast<OverRide*>($1), dynamic_cast<RetType*>($2), $3, dynamic_cast<Formals*>($5));} LBRACE Statements RBRACE {table.close_scope();}
        ; V

OverRide: /*epsilon*/   ?                                                        {$$ = new OverRide();}
        | OVERRIDE      ?                                                        {$$ = new OverRide(true);}
        ;

RetType: Type         V                                                          {$$ = new RetType(dynamic_cast<Type*>($1)->type);}
       | VOID         V                                                          {$$ = new RetType("void");}
       ;

Formals: /*epsilon*/   V                                                         {$$ = new Formals();}
           | FormalsList            V                                            {$$ = new Formals(dynamic_cast<FormalsList*>($1),yylineno);}
       ;

FormalsList: FormalDecl   V                                                      {$$ = new FormalsList(dynamic_cast<FormalDecl*>($1));}
           | FormalDecl COMMA FormalsList     V                                  {$$ = new FormalsList(dynamic_cast<FormalDecl*>($1), dynamic_cast<FormalsList*>($3));}
           ;

FormalDecl: Type ID   V                                                          {$$ = new FormalDecl(dynamic_cast<Type*>($1), $2);}
            ;
Statements: Statement  V                                                         {$$ = new Statements(dynamic_cast<Statement*>($1));}
          | Statements Statement      V                                          {$$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));}
          ;


Statement: LBRACE {table.open_scope();} Statements RBRACE       V                {$$ = new Statement(); //TODO: check if $3 in the parser.ypp
                                                                                 table.close_scope();}
          | Type ID SC   V                                                       {$$ = new Statement(dynamic_cast<Type*>($1), $2);}
          | Type ID ASSIGN Exp SC   V                                          {$$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4));}
          | ID ASSIGN Exp SC   V                                                {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
          | Call SC       V                                                      {$$ = new Statement(dynamic_cast<Call*>($1));}
          | RETURN SC         V                                                  {$$ = new Statement($1);}
          | RETURN Exp SC       V                                                {$$ = new Statement($1, dynamic_cast<Exp*>($2) );}
          | IF LPAREN CheckBoolExp RPAREN M Statement    V                                {$$ = new Statement(dynamic_cast<Exp*>($3));
                                                                                 table.close_scope();}
       V   | IF LPAREN CheckBoolExp RPAREN M MarkerM Statement ELSE  {table.close_scope(); table.open_scope();} MarkerM Statement      {$$ = new Statement(dynamic_cast<Exp*>($3));
                                                                                                                                    table.close_scope();}
       V  | WHILE LPAREN CheckBoolExp RPAREN {table.open_scope(true);} Statement         {$$ = new Statement(dynamic_cast<Exp*>($3));
                                                                                 table.close_scope();}
       V   | BREAK SC                                                            {$$ = new Statement($1);}
       V   | CONTINUE SC                                                         {$$ = new Statement($1);}
          ;

Call: ID LPAREN ExpList RPAREN   V                                               {$$ = new Call($1, dynamic_cast<ExpList*>($3));}
    | ID LPAREN RPAREN           V                                               {$$ = new Call($1);}
    ;

// dont know if we need to use phi or not, or do anything at all. ask someone
ExpList: Exp         V                                                           {$$ = new ExpList(dynamic_cast<Exp*>($1));}
       | Exp COMMA ExpList         V                                            {$$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));}
       ;

Type: INT  V                                                                     {$$ = new Type("int");}
    | BYTE  V                                                                    {$$ = new Type("byte");}
    | BOOL   V                                                                   {$$ = new Type("bool");}
    ;

Exp: LPAREN Exp RPAREN  V                                                        {$$ = new Exp(dynamic_cast<Exp*>($2));}
    | Exp PLUS_MINUS Exp V                                                       {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | Exp MUL_DIV Exp V                                                          {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | ID    V                                                                    {$$ = new Exp($1);}
    | Call   V                                                                   {$$ = new Exp(dynamic_cast<Call*>($1));}
    | NUM V                                                                       {$$ = new Exp($1, "int");}
    | NUM B V //make sure we need to save as i8                                                                    {$$ = new Exp($1, $2);}
    | STRING V                                                                   {$$ = new Exp($1, "string");}
    | TRUE         V                                                             {$$ = new Exp($1, "bool");}
    | FALSE       V                                                              {$$ = new Exp($1, "bool");}
    | NOT Exp    V                                                               {$$ = new Exp($1, dynamic_cast<Exp*>($2));}
    | Exp AND Exp      V                                                         {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | Exp OR Exp      V                                                          {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | Exp EQUALITY Exp  V                                                        {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | Exp RELATION Exp    V                                                      {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    | LPAREN Type RPAREN Exp   V                                                 {$$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4));}
    ;
